#Author: Benjamin Brittain
#importing the random module so that we can generate random names and order numbers
import random 

#creating a class Order
class Order:
    #creating a method that generates a random number of burgers to that would be ordered
    def randomBurgers(self):
        randomBurgerAmmount = random.randint(1,20)
        return randomBurgerAmmount
    
    #initializing the class and setting burgerCount equal to the amount returned from
    #the random burger method
    def __init__(self):
        self.__burgerCount = self.randomBurgers()
    
    #creating a getter for the buger count
    def getBurgerCount(self):
        return self.__burgerCount

#creating a person class 
class Person:
    #creating a random name method that creates a random name
    def randomName(self):
        asCustomers = ["Jefe", "El Guapo", "Lucky Day", 
                       "Ned Nederlander", "Dusty Bottoms", 
                       "Harry Flugleman", "Carmen", 
                       "Invisible Swordsman", "Singing Bush"]
        return random.choice(asCustomers)
    
    #initializing class and setting name to a random name generated by the above method
    def __init__(self):
        self.__customerName = self.randomName()

    #creating a getter for the person name 
    def getName(self):
        return self.__customerName

#creating a child class of Person called Customer
class Customer(Person):
    #initializing the class and calling its parent class. Setting order eqaul to an order object
    def __init__(self):
        super().__init__()
        self.__order = Order()

    #creating a getter for the order
    def getOrder(self):
        return self.__order.getBurgerCount()

#creating a queue for customers and a dictionary to eventually hold names as keys and orders as values
customerQueue = []
customerDict = {}

#adding 100 customers to the queue
for i in range(100):
    customerQueue.append(Customer())

# print(customerQueue[0].getOrder())

# running through each customer in the queue 
for customer in customerQueue:
    #checking to see if the customer is already in the dictionary
    if customer.getName() in customerDict:
        #if it's in the dictionary, we'll just add to their order 
        customerDict[customer.getName()] += customer.getOrder()     
    else:
        #if it's not in the dictionary, we'll create the person in the dict and then we'll add the order amount as their value
        customerDict[customer.getName()] = customer.getOrder()

#this is just a for loop to clear everything out of the queue now that we don't neeed it 
for count in range(1, len(customerQueue) + 1):
    customerQueue.pop()

#creating a sorted list of the dictionary from highest orders to lowest
sortedCustomersList = sorted(customerDict.items(), key=lambda x: x[1], reverse=True)

#printing out each name with a standardized spacing between the name and the number of burgers
for item in sortedCustomersList:
    print(item[0].ljust(19) + " " + str(item[1]))
    










